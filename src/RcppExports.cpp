// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/iptree.h"
#include <Rcpp.h>

using namespace Rcpp;

// create
XPtr<ip_trie> create();
RcppExport SEXP _iptree_create() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(create());
    return rcpp_result_gen;
END_RCPP
}
// insert
void insert(XPtr<ip_trie> t, CharacterVector keys, CharacterVector values);
RcppExport SEXP _iptree_insert(SEXP tSEXP, SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<ip_trie> >::type t(tSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type values(valuesSEXP);
    insert(t, keys, values);
    return R_NilValue;
END_RCPP
}
// match_str
std::string match_str(XPtr<ip_trie> t, std::string k);
RcppExport SEXP _iptree_match_str(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<ip_trie> >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::string >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(match_str(t, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iptree_create", (DL_FUNC) &_iptree_create, 0},
    {"_iptree_insert", (DL_FUNC) &_iptree_insert, 3},
    {"_iptree_match_str", (DL_FUNC) &_iptree_match_str, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_iptree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
